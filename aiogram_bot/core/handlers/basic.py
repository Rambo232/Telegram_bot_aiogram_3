import json
import random
import typing
import aiogram.types
from aiogram import Bot
from aiogram.types import Message, KeyboardButton
from aiogram import F
from core.settings import settings
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import CallbackQuery
from typing import Dict
from core.keyboards.reply import reply_keyboard, tele_poll_location_keyboard, get_reply_keyboard
from core.keyboards.inline import select_macbook, get_inline_keyboard

image_count = 0
violations_count = 0


async def get_start(message: Message, bot: Bot):
    await bot.send_message(
        message.from_user.id, f'<b>–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}, —Ä–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å!(–ñ–∏—Ä–Ω–æ)</b>')
    # await message.answer(
    # f'<s>–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}. –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.</s>(–ó–∞—á–µ—Ä–∫–Ω—É—Ç–æ)')
    await message.reply(
        f'<tg-spoiler>–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}. –≠—Ç–æ –æ—Ç–≤–µ—Ç.</tg-spoiler>(–°–ø–æ–π–ª–µ—Ä)')

    await message.answer(
        f'<i>–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}. –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.(–ö—É—Ä—Å–∏–≤–æ–º)</i>',
        reply_markup=get_reply_keyboard())


async def get(message: Message):
    data_message = message.dict()
    print(json.dumps(data_message, default=str))
    result_data_message = await get_data_message(data_message=data_message)
    for key, value in result_data_message.items():
        print(f'{key} - {value}')
        if isinstance(value, str):
            print(f'–ò—Å–ø–æ–ª—å–∑—É—è magic_filter –∫ –¥–∞–Ω–Ω—ã–º {key} –º–æ–∂–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ F.{key} == {value}')
        elif isinstance(value, int):
            print(f'–ò—Å–ø–æ–ª—å–∑—É—è magic_filter –∫ –¥–∞–Ω–Ω—ã–º {key} –º–æ–∂–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ F.{key} == {value}')


async def get_user_info(message: Message, bot: Bot):
    global violations_count

    answers = [f'–°–ª—ã—à—å <b>{message.from_user.first_name}</b>, –µ–±–∞–ª–æ –∑–∞–≤–∞–ª–∏–ª!',
               f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ <b>{message.from_user.first_name}</b>, —Ñ–∏–ª—å—Ç—Ä—É–π—Ç–µ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è, —ç—Ç–æ –Ω–µ —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–æ.!',
               f'–£–≤–∞–∂–∞–µ–º—ã–π <b>{message.from_user.first_name}</b>, –µ–±–∞–ª–æ –∑–∞–≤–∞–ª–∏–ª.',
               f'<b>{message.from_user.first_name}</b>, –º–Ω–µ —Å—Ç—ã–¥–Ω–æ –∑–∞ –≤–∞—à—É –º–∞–Ω–µ—Ä—É –æ–±—â–µ–Ω–∏—è!',
               f'<b>{message.from_user.first_name}</b>, –≤—ã –º–æ–≥–ª–∏ –±—ã –±—ã—Ç—å –ø–æ –≤–µ–∂–ª–∏–≤–µ–µ..',
               f'<b>{message.from_user.first_name}</b>, –ø–æ–¥–æ–±–Ω—ã–µ —Å–ª–æ–≤–∞ –Ω–µ –¥–æ–ø—É—Å—Ç–∏–º—ã –≤ –Ω–∞—à–µ–º —á–∞—Ç–µ!',
               f'–ï–±–∞–Ω—ã–π –≤ —Ä–æ—Ç! <b>{message.from_user.first_name}</b>, —Ö—É–ª—è —Ç—ã –∑–∞ –±–∞–∑–∞—Ä–æ–º –Ω–µ —Å–ª–µ–¥–∏—à—å?!',
               f'<b>{message.from_user.first_name}</b>, –¥—É–º–∞—é –¥—Ä—É–≥–∏–µ –Ω–µ –æ—Ü–µ–Ω—è—Ç –≤–∞—à–µ –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏–µ.'
               ]

    ban_answers = [f'<b>{message.from_user.first_name}</b>, —Ç–µ–±–µ –±–∞–Ω.',
                   f'<b>{message.from_user.first_name}</b>, —Ç—ã –¥–æ–∏–≥—Ä–∞–ª—Å—è, —Ç–µ–ø–µ—Ä—å —Ç—ã –≤ —á—Å.',
                   f'–ù—É –≤—Å–µ <b>{message.from_user.first_name}</b>, —Ç–µ–ø–µ—Ä—å —Ç–µ–±–µ –ø—Ä–∏–¥–µ—Ç—Å—è –ø–æ–¥–æ—Å—Ç—ã—Ç—å, —Ç–µ–±–µ –ë–ê–ù!',
                   f'–ó–∞ –Ω–µ —É–≤–∞–∂–µ–Ω–∏–µ –∫ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∏–º–µ–Ω–µ–º --> <b>{message.from_user.first_name}</b>, –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω –¥–æ –∑–∞–≤—Ç—Ä–∞.',
                   f'–ó–∞ –Ω–µ–ø–æ—Ç—Ä–µ–±—Å—Ç–≤–æ –≤ —á–∞—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∏–º–µ–Ω–µ–º --> <b>{message.from_user.first_name}</b>, –±—ã–ª –Ω–∞–∫–∞–∑–∞–Ω –±–∞–Ω–∞–Ω–æ–º, —Ç–æ–µ—Å—Ç—å –±–∞–Ω–æ–º.',
                   f'–ó–∞ –∫–æ–Ω—á–µ–Ω–Ω—ã–π –±–∞–∑–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∏–º–µ–Ω–µ–º --> <b>{message.from_user.first_name}</b>, –±—ã–ª –≤—ã–µ–±–∞–Ω –∏ –∑–∞–±–∞–Ω–µ–Ω!',
                   f'–ó–∞ –ø–∏–∑–¥–µ—à—å –≤ —á–∞—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∏–º–µ–Ω–µ–º --> <b>{message.from_user.first_name}</b>, –±—ã–ª –Ω–∞–¥–µ—Ç –∫–ª—è–ø, –ø–æ–∫–∞ –Ω–µ –ø–µ—Ä–µ—Å—Ç–∞–Ω–µ—Ç –ø–∏–∑–¥–µ—Ç—å!',
                   f'–í—Å–µ –ø–æ–º–Ω—è—Ç –∫–∞–∫ –≤—ã —É–º–µ–ª–∏ –∫—Ä–∞—Å–∏–≤–æ –≥–æ–≤–æ—Ä–∏—Ç—å <b>{message.from_user.first_name}</b>, –Ω–æ —Ç–æ –≤—Ä–µ–º—è —É—à–ª–æ –∏ –≤—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã –∑–∞ –æ—Å–∫–æ—Ä–±–∏—Ç–µ–ª—å–Ω—ã–µ –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏—è!'
                   ]

    if violations_count < 8:
        await message.answer(answers[random.randint(0, len(answers)-1)])
        violations_count += 1
        answer_json = json.dumps(message.dict(), default=str)
        print(answer_json)
        # count = len(answer_json)
        for key, value in message.dict().items():
            print(key, value)
    else:
        await message.answer(ban_answers[random.randint(0, len(ban_answers)-1)])
        # AFTER THIS MESSAGE NEED TO MUTE USER, LATER...



        #==============================================
        answer_json = json.dumps(message.dict(), default=str)
        print(answer_json)
        for key, value in message.dict().items():
            print(key, value)


async def get_user_location(message: Message, bot: Bot):
    await message.answer(f'–¢—ã –æ–ø—Ç—Ä–∞–≤–∏–ª —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é!\r\a'
                         f'\n–®–∏—Ä–æ—Ç–∞---> {message.location.latitude}\r\a\n–î–æ–ª–≥–æ—Ç–∞---> {message.location.longitude}')


async def get_data_message(data_message: Dict, prefix: str = '', sep: str = '.'):
    correct_values = {}
    for key, value in data_message.items():
        if isinstance(value, Dict):
            correct_values.update(await get_data_message(data_message=value, prefix=f'{prefix}{key}{sep}'))
        else:
            correct_values[f'{prefix}{key}'] = value
    return correct_values


async def get_photo(message: Message, bot: Bot):
    global image_count
    await message.answer(f'–Ø –ø–æ–ª—É—á–∏–ª —Ç–≤–æ—é –∫–∞—Ä—Ç–∏–Ω–∫—É, –ø–æ–∂–∞–ª—É–π —Å–æ—Ö—Ä–∞–Ω—é –µ–µ —Å–µ–±–µüòÑ')
    file = await bot.get_file(message.photo[-1].file_id)
    # print(message.photo[-1].file_id)
    await bot.download_file(file.file_path, f'core/images/photo_{image_count}.jpg')
    image_count += 1
    print(image_count)


async def get_admin_message(message: Message):
    print(F.from_user_id == settings.bots.admin_id)
    await message.answer(f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ –∞–¥–º–∏–Ω {message.from_user.first_name}!\n!')


# async def get_inline_keyboard():
#     keyboard_builder = InlineKeyboardBuilder()
#     keyboard_builder.button(text="–î–∞", callback_data='button_1')
#     keyboard_builder.button(text="–ù–µ—Ç", callback_data='button_2')
#     keyboard_builder.adjust(1)
#     return keyboard_builder.as_markup()


async def get_inline(message: Message, bot: Bot):
    await message.answer(f'<s> –ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}. –ø–æ–∫–∞–∑—ã–≤–∞—é –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É!</s>',
                         reply_markup=get_inline_keyboard())


async def get_keyboard(message: Message):
    await message.answer("–í–æ—Ç —Ç–µ–±–µ –∫–Ω–æ–ø–∫–∏, –∂–º–∏...", reply_markup=get_inline_keyboard())


async def call_data(call: CallbackQuery):
    print(call.data)
    await call.answer()
    result = await get_data_message(data_message=call.dict())
    for key, value in result.items():
        print(f'{key} - {value}')
